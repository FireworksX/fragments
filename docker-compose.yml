networks:
  default:

services:
  #frontend
 # frontend:
  #  build:
  #    context: .
  #    dockerfile: deployment/docker/Dockerfile.front
  #  ports:
   #   - "3000:3000"
  #  volumes:
  #    - .:/app
  #    - /app/node_modules  # Prevent overwriting node_modules
  #  environment:
    #  - NODE_ENV=development
  #  command: npm run dev
  #  env_file: .env
  #  depends_on:
   #   - core

  # backend
  nginx:
    build:
      context: deployment/docker/nginx
      dockerfile: Dockerfile
    container_name: backend-nginx
    ports:
      - "80:80"
    volumes:
      - ./deployment/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker_data/media:${MEDIA_STORAGE_PATH}
      - ./.docker_data/media/avatars:${MEDIA_STORAGE_PATH}/avatars
      - ./.docker_data/media/projects:${MEDIA_STORAGE_PATH}/projects
      - ./.docker_data/media/fragments:${MEDIA_STORAGE_PATH}/fragments
    depends_on:
      - core
    networks:
      - default
    env_file: .env

  core:
    container_name: backend-core
    environment:
      - RUN_LEVEL=dev
      - MEDIA_STORAGE_PATH=${MEDIA_STORAGE_PATH}
    entrypoint:
      - uvicorn
      - services.core:app
      - --host=0.0.0.0
      - --reload
    build:
      context: apps/backend/service
      dockerfile: deployment/docker/Dockerfile.server
      target: base
      args:
        RUN_LEVEL: dev
    volumes:
      - ./apps/backend/service:/opt/app
      - ./.docker_data/media:${MEDIA_STORAGE_PATH}
      - ./.docker_data/media/avatars:${MEDIA_STORAGE_PATH}/avatars
      - ./.docker_data/media/projects:${MEDIA_STORAGE_PATH}/projects
      - ./.docker_data/media/fragments:${MEDIA_STORAGE_PATH}/fragments
    networks:
      - default
    restart: unless-stopped
    env_file: .env
  
  postgres:
    container_name: backend-postgres
    image: library/postgres:13
    ports:
      - "5432:5432"
    networks:
      - default
    volumes:
      - ./.docker_data/postgres:/var/lib/postgresql/data
    env_file:
      - .env

  pgadmin:
    container_name: backend-pgadmin
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - postgres
    ports:
      - "5050:80"
    volumes:
      - ./.docker_data/pg_admin:/var/lib/pgadmin
    env_file:
      - .env
