# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union FilterOSTypeGetFilterDeviceTypeGetFilterPageGetFilterGeoLocationsGetFilterTimeFramesGet = FilterDeviceTypeGet | FilterGeoLocationsGet | FilterOSTypeGet | FilterPageGet | FilterTimeFramesGet

type AllFiltersGet {
    deviceTypes: [DeviceType!]!
    geoLocations: [CountryGet!]!
    osTypes: [OSType!]!
}

type AreaGet {
    areaCode: String!
    author: UserGet!
    campaigns: [CampaignGet!]!
    defaultCampaign: CampaignGet!
    description: String
    id: Int!
    logo: MediaGet!
    name: String!
    projectId: Int!
}

type AuthPayload {
    accessToken: String!
    refreshToken: String!
    user: UserGet!
}

type CampaignGet {
    active: Boolean!
    archived: Boolean!
    areaId: Int!
    author: UserGet!
    default: Boolean!
    description: String
    filters: [FilterOSTypeGetFilterDeviceTypeGetFilterPageGetFilterGeoLocationsGetFilterTimeFramesGet!]!
    fragment: FragmentGet
    id: Int!
    logo: MediaGet!
    name: String!
}

type ClientGet {
    createdAt: String!
    history: [ClientHistoryGet!]!
    id: Int!
    lastVisitedAt: String
    updatedAt: String!
}

type ClientHistoryGet {
    browser: String
    city: String
    clientId: Int!
    country: String
    createdAt: String!
    deviceType: Int
    domain: String
    id: Int!
    language: String
    osType: Int
    pageLoadTime: Float
    referrer: String
    region: String
    screenHeight: Int
    screenWidth: Int
    subdomain: String
    url: String
}

type ClientProjectGoalGet {
    client: ClientGet!
    createdAt: String!
    id: Int!
    project: ProjectGet!
    projectGoal: ProjectGoalGet!
}

type CountryGet {
    country: String!
    regions: [RegionGet!]!
}

type FeedbackGet {
    content: String
    feel: FeelLevelGet!
    page: String!
}

type FilterDeviceTypeGet {
    deviceTypes: [DeviceType!]!
}

type FilterGeoLocationGet {
    city: String
    country: String!
    region: String
}

type FilterGeoLocationsGet {
    geoLocations: [FilterGeoLocationGet!]!
}

type FilterOSTypeGet {
    osTypes: [OSType!]!
}

type FilterPageGet {
    pages: [String!]!
}

type FilterTimeFrameGet {
    fromTime: DateTime!
    toTime: DateTime!
}

type FilterTimeFramesGet {
    timeFrames: [FilterTimeFrameGet!]!
}

type FragmentGet {
    assets: [FragmentMediaGet!]!
    author: UserGet!
    directoryId: Int!
    document: JSON!
    id: Int!
    linkedFragments: [FragmentGet!]
    name: String!
    props: JSON
}

type FragmentMediaGet {
    id: Int!
    publicPath: String!
}

type MediaGet {
    mediaId: Int!
    mediaType: MediaType!
    publicPath: String!
}

type Mutation {
    addClientMetric(metric: ClientMetricPost!): Void
    addProjectPublicKey(projectId: Int!, publicKeyName: String): ProjectGet!
    addUserToProject(projectId: Int!, role: Int!, userId: Int!): Void
    changeProjectPrivateKey(projectId: Int!): ProjectGet!
    changeUserRole(projectId: Int!, role: RoleGet!, userId: Int!): Void
    createArea(area: AreaPost!): AreaGet!
    createCampaign(cmp: CampaignPost!): CampaignGet!
    createDirectory(directory: ProjectDirectory!): [ProjectDirectoryGet!]!
    createFragment(fg: FragmentPost!): FragmentGet!
    createProject(pr: ProjectPost!): ProjectGet!
    createProjectGoal(goal: ProjectGoalPost!): ProjectGoalGet!
    deleteArea(areaId: Int!): Void
    deleteAsset(media: MediaDelete!): Void
    deleteCampaign(campaignId: Int!): Void
    deleteDirectory(directoryId: Int!): Void
    deleteFragment(fragmentId: Int!): Void
    deleteProject(projectId: Int!): Void
    deleteProjectGoal(goalId: Int!): Void
    deleteProjectPublicKey(projectId: Int!, publicKeyId: Int!): Void
    feedback(fd: FeedbackPost!): FeedbackGet!
    login(email: String!, password: String!): AuthPayload!
    refresh: AuthPayload!
    signup(email: String!, firstName: String!, lastName: String, password: String!): AuthPayload!
    updateArea(area: AreaPatch!): AreaGet!
    updateCampaign(cmp: CampaignPatch!): CampaignGet!
    updateDirectory(directory: ProjectDirectoryPatch!): [ProjectDirectoryGet!]!
    updateFragment(fg: FragmentPatch!): FragmentGet!
    updateProject(pr: ProjectPatch!): ProjectGet!
    updateProjectGoal(goal: ProjectGoalPatch!): ProjectGoalGet!
    uploadAsset(file: Upload!, media: MediaPost!): MediaGet!
}

type ProjectDirectoryGet {
    fragments: [FragmentGet!]!
    hasFragments: Boolean!
    hasSubdirectories: Boolean!
    id: Int!
    name: String!
    parentId: Int
    projectId: Int!
}

type ProjectGet {
    areas: [AreaGet!]!
    id: Int!
    logo: MediaGet!
    members: [UserRoleGet!]!
    name: String!
    owner: UserGet!
    privateKey: ProjectKeyGet
    publicKeys: [ProjectKeyGet!]!
    rootDirectoryId: Int!
}

type ProjectGoalGet {
    id: Int!
    name: String!
    targetAction: String!
}

type ProjectKeyGet {
    id: Int!
    name: String
    value: String!
}

type Query {
    area(areaId: Int!): AreaGet!
    areas(projectId: Int!): [AreaGet!]!
    campaign(active: Boolean, archived: Boolean, areaId: Int, campaignId: Int): [CampaignGet!]!
    campaignByName(active: Boolean, archived: Boolean, areaId: Int!, limit: Int = 5, name: String!): [CampaignGet!]!
    clientById(clientId: Int!): ClientGet!
    clientFragment(fragmentId: Int!): FragmentGet
    clientHistory(clientId: Int!): [ClientHistoryGet!]!
    clientsByProjectId(projectId: Int!): [ClientGet!]!
    contributionsToProjectGoal(projectGoalId: Int!, projectId: Int!): [ClientProjectGoalGet!]!
    directory(directoryId: Int!): [ProjectDirectoryGet!]!
    filter(countries: [String!], regions: [String!]): AllFiltersGet!
    fragment(fragmentIds: [Int!], projectId: Int): [FragmentGet!]!
    profile: AuthPayload!
    project(projectId: Int): [ProjectGet!]!
    projectGoals(projectId: Int!): [ProjectGoalGet!]!
}

type RegionGet {
    cities: [String!]!
    region: String!
}

type UserGet {
    email: String!
    firstName: String!
    id: Int!
    lastName: String
    logo: MediaGet!
}

type UserRoleGet {
    email: String!
    firstName: String!
    id: Int!
    lastName: String
    logo: MediaGet!
    role: RoleGet!
}

enum ClientMetricType {
    INIT_SESSION
    REACH_PROJECT_GOAL
    RELEASE_SESSION
}

enum DeviceType {
    DESKTOP
    MOBILE
    TABLET
}

enum FeelLevelGet {
    FIVE
    FOUR
    ONE
    THREE
    TWO
}

enum MediaType {
    AREA_LOGO
    CAMPAIGN_LOGO
    FRAGMENT_ASSET
    PROJECT_LOGO
    USER_LOGO
}

enum OSType {
    ANDROID
    IOS
    LINUX
    MACOS
    WINDOWS
}

enum RoleGet {
    ADMIN
    DESIGNER
    MANAGER
    OWNER
}

"Date with time (isoformat)"
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf)."
scalar JSON

scalar Upload

"Represents NULL values"
scalar Void

input AreaPatch {
    areaCode: String
    description: String
    id: Int!
    name: String
}

input AreaPost {
    areaCode: String!
    description: String
    name: String!
    projectId: Int!
}

input CampaignPatch {
    active: Boolean
    archived: Boolean
    description: String
    filters: FiltersPost
    fragmentId: Int
    id: Int!
    name: String
}

input CampaignPost {
    active: Boolean!
    archived: Boolean!
    areaId: Int!
    description: String
    filters: FiltersPost
    fragmentId: Int
    name: String!
}

input ClientMetricPost {
    metricType: ClientMetricType!
    metricValue: String
}

input FeedbackPost {
    content: String
    feel: FeelLevelGet!
    page: String!
}

input FilterGeoLocationPost {
    city: String
    country: String!
    region: String
}

input FilterTimeFramePost {
    fromTime: DateTime!
    toTime: DateTime!
}

input FiltersPost {
    deviceTypes: [DeviceType!]!
    geolocations: [FilterGeoLocationPost!]!
    osTypes: [OSType!]!
    pages: [String!]!
    timeFrames: [FilterTimeFramePost!]!
}

input FragmentPatch {
    directoryId: Int
    document: JSON
    id: Int!
    linkedFragments: [Int!]
    name: String
    props: JSON
}

input FragmentPost {
    directoryId: Int!
    document: JSON!
    linkedFragments: [Int!]
    name: String!
    projectId: Int!
    props: JSON
}

input MediaDelete {
    mediaId: Int
    mediaType: MediaType!
    targetId: Int
}

input MediaPost {
    directoryId: Int
    mediaType: MediaType!
    targetId: Int
}

input ProjectDirectory {
    name: String!
    parentId: Int!
    projectId: Int!
}

input ProjectDirectoryPatch {
    id: Int!
    name: String
    parentId: Int
}

input ProjectGoalPatch {
    id: Int!
    name: String
    targetAction: String
}

input ProjectGoalPost {
    name: String!
    projectId: Int!
    targetAction: String!
}

input ProjectPatch {
    id: Int!
    name: String
}

input ProjectPost {
    logo: String
    name: String!
}
