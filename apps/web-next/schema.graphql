# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union FilterPageGetFilterDeviceTypeGetFilterOSTypeGetFilterTimeFramesGetFilterGeoLocationsGet = FilterDeviceTypeGet | FilterGeoLocationsGet | FilterOSTypeGet | FilterPageGet | FilterTimeFramesGet

type AllFiltersGet {
    deviceTypes: [DeviceType!]!
    geoLocations: [CountryGet!]!
    osTypes: [OSType!]!
}

type AreaGet {
    areaCode: String!
    author: UserGet!
    campaigns: [CampaignGet!]!
    defaultCampaign: CampaignGet!
    description: String
    id: Int!
    logo: MediaGet!
    projectId: Int!
    properties: [JSON!]
}

type AuthPayload {
    accessToken: String!
    refreshToken: String!
    user: UserGet!
}

type AverageConversionGet {
    conversion: Float!
    trend: Trend!
    graphs: {
    lines: Point[]
    flow
}
}

type CampaignGet {
    areaId: Int!
    author: UserGet!
    description: String
    featureFlag: FeatureFlagGet!
    id: Int!
    logo: MediaGet!
    name: String!
    status: CampaignStatus!
}

type CampaignStatsGet {
    lastViews: Int!
    percentage: Float!
    totalViews: Int!
}

type ClientAreaGet {
    areaProperties: [JSON!]
    variant: VariantGet!
}

type ClientGet {
    createdAt: String!
    history: [ClientHistoryGet!]!
    id: Int!
    lastVisitedAt: String
    updatedAt: String!
}

type ClientHistoryGet {
    area: AreaGet
    browser: String
    city: String
    clientId: Int!
    country: String
    createdAt: String!
    deviceType: Int
    domain: String
    eventType: ClientHistoryEventType!
    id: Int!
    language: String
    osType: Int
    pageLoadTime: Float
    referrer: String
    region: String
    screenHeight: Int
    screenWidth: Int
    subdomain: String
    url: String
    variant: VariantGet
}

type ClientProjectGoalGet {
    client: ClientGet!
    createdAt: String!
    id: Int!
    project: ProjectGet!
    projectGoal: ProjectGoalGet!
}

type ConditionGet {
    filterData: FilterPageGetFilterDeviceTypeGetFilterOSTypeGetFilterTimeFramesGetFilterGeoLocationsGet
    id: Int!
    name: String!
}

type ConditionSetGet {
    conditions: [ConditionGet!]!
    id: Int!
    name: String!
}

type CountryGet {
    country: String!
    regions: [RegionGet!]!
}

type FeatureFlagGet {
    description: String
    id: Int!
    name: String!
    releaseCondition: ReleaseConditionGet!
    rotationType: RotationType!
    variants: [VariantGet!]!
}

type FeedbackGet {
    content: String
    feel: FeelLevelGet!
    page: String!
}

type FilterDeviceTypeGet {
    deviceTypes: [DeviceType!]!
}

type FilterGeoLocationGet {
    city: String
    country: String!
    region: String
}

type FilterGeoLocationsGet {
    geoLocations: [FilterGeoLocationGet!]!
}

type FilterOSTypeGet {
    osTypes: [OSType!]!
}

type FilterPageGet {
    pages: [String!]!
}

type FilterTimeFrameGet {
    fromTime: DateTime!
    toTime: DateTime!
}

type FilterTimeFramesGet {
    timeFrames: [FilterTimeFrameGet!]!
}

type FragmentGet {
    assets: [MediaGet!]!
    author: UserGet!
    directoryId: Int!
    document: JSON!
    id: Int!
    linkedFragments: [FragmentGet!]
    linkedGoals: [Int!]
    name: String!
    props: JSON
}

type FragmentVariantGet {
    fragment: FragmentGet!
    props: JSON
}

type GoalStatsGet {
    graph: [GraphPoint!]!
}

type GraphPoint {
    x: DateTime!
    y: Value!
}

type MediaGet {
    mediaId: Int!
    mediaType: MediaType!
    publicPath: String!
}

type Mutation {
    addClientMetric(metric: ClientMetricPost!): Void
    addProjectAllowedOrigin(name: String!, origin: String!, projectId: Int!): ProjectGet!
    addProjectPublicKey(projectId: Int!, publicKeyName: String): ProjectGet!
    addUserToProject(projectId: Int!, role: Int!, userId: Int!): Void
    changeProjectPrivateKey(projectId: Int!): ProjectGet!
    changeUserRole(projectId: Int!, role: RoleGet!, userId: Int!): Void
    createArea(area: AreaPost!): AreaGet!
    createCampaign(cmp: CampaignPost!): CampaignGet!
    createCondition(condition: ConditionPost!, conditionSetId: Int!): ConditionGet!
    createConditionSet(conditionSet: ConditionSetPost!, releaseConditionId: Int!): ConditionSetGet!
    createDirectory(directory: ProjectDirectory!): [ProjectDirectoryGet!]!
    createFeatureFlag(featureFlag: FeatureFlagPost!, projectId: Int!): FeatureFlagGet!
    createFragment(fg: FragmentPost!): FragmentGet!
    createProject(pr: ProjectPost!): ProjectGet!
    createProjectGoal(goal: ProjectGoalPost!): ProjectGoalGet!
    createReleaseCondition(releaseCondition: ReleaseConditionPost!): ReleaseConditionGet!
    createVariant(variant: VariantPost!): VariantGet!
    deleteArea(areaId: Int!): Void
    deleteAsset(media: MediaDelete!): Void
    deleteCampaign(campaignId: Int!): Void
    deleteCondition(conditionId: Int!): Void
    deleteConditionSet(conditionSetId: Int!): Void
    deleteDirectory(directoryId: Int!): Void
    deleteFeatureFlag(featureFlagId: Int!): Void
    deleteFragment(fragmentId: Int!): Void
    deleteProject(projectId: Int!): Void
    deleteProjectAllowedOrigin(allowedOriginId: Int!, projectId: Int!): Void
    deleteProjectGoal(goalId: Int!): Void
    deleteProjectPublicKey(projectId: Int!, publicKeyId: Int!): Void
    deleteReleaseCondition(releaseConditionId: Int!): Void
    deleteVariant(variantId: Int!): Void
    feedback(fd: FeedbackPost!): FeedbackGet!
    login(email: String!, password: String!): AuthPayload!
    normalizeVariantsRolloutPercentage(featureFlagId: Int!): Void
    refresh: AuthPayload!
    signup(email: String!, firstName: String!, lastName: String, password: String!): AuthPayload!
    updateArea(area: AreaPatch!): AreaGet!
    updateCampaign(cmp: CampaignPatch!): CampaignGet!
    updateCondition(condition: ConditionPatch!): ConditionGet!
    updateConditionSet(conditionSet: ConditionSetPatch!): ConditionSetGet!
    updateDirectory(directory: ProjectDirectoryPatch!): [ProjectDirectoryGet!]!
    updateFeatureFlag(featureFlag: FeatureFlagPatch!): FeatureFlagGet!
    updateFragment(fg: FragmentPatch!): FragmentGet!
    updateProject(pr: ProjectPatch!): ProjectGet!
    updateProjectGoal(goal: ProjectGoalPatch!): ProjectGoalGet!
    updateReleaseCondition(releaseCondition: ReleaseConditionPatch!): ReleaseConditionGet!
    updateVariant(variant: VariantPatch!): VariantGet!
    uploadAsset(file: Upload!, media: MediaPost!): MediaGet!
}

type ProjectAllowedOriginGet {
    id: Int!
    name: String!
    origin: String!
}

type ProjectDirectoryGet {
    fragments: [FragmentGet!]!
    hasFragments: Boolean!
    hasSubdirectories: Boolean!
    id: Int!
    name: String!
    parentId: Int
    projectId: Int!
}

type ProjectGet {
    allowedOrigins: [ProjectAllowedOriginGet!]!
    areas: [AreaGet!]!
    id: Int!
    logo: MediaGet!
    members: [UserRoleGet!]!
    name: String!
    owner: UserGet!
    privateKey: ProjectKeyGet
    publicKeys: [ProjectKeyGet!]!
    rootDirectoryId: Int!
}

type ProjectGoalGet {
    failureLevel: Float
    id: Int!
    name: String!
    successLevel: Float
    targetAction: String!
}

type ProjectKeyGet {
    id: Int!
    name: String
    value: String!
}

type Query {
    area(areaId: Int, projectId: Int): [AreaGet!]!
    areaAverageConversion(areaId: Int!): AverageConversionGet!
    campaign(areaId: Int, campaignId: Int, campaignStatus: CampaignStatus, limit: Int = 5, name: String, withoutDefault: Boolean = true): [CampaignGet!]!
    campaignAverageConversion(campaignId: Int!): AverageConversionGet!
    campaignStats(areaId: Int!, campaignId: Int!, fromTs: DateTime, toTs: DateTime): CampaignStatsGet!
    client(clientId: Int, projectId: Int): [ClientGet!]!
    clientArea(areaCode: String!): ClientAreaGet
    clientFragment(fragmentId: Int!): FragmentGet
    clientHistory(clientId: Int!): [ClientHistoryGet!]!
    condition(conditionId: Int!): ConditionGet!
    conditionSet(conditionSetId: Int!): ConditionSetGet!
    contributionsToProjectGoal(projectGoalId: Int!, projectId: Int!): [ClientProjectGoalGet!]!
    directory(directoryId: Int!): [ProjectDirectoryGet!]!
    featureFlag(featureFlagId: Int!): FeatureFlagGet!
    filter(countries: [String!], regions: [String!]): AllFiltersGet!
    fragment(fragmentIds: [Int!], projectId: Int): [FragmentGet!]!
    goalAverageConversion(goalId: Int!): AverageConversionGet!
    goalStats(fromTs: DateTime, goalId: Int!, toTs: DateTime): GoalStatsGet!
    profile: AuthPayload!
    project(projectId: Int): [ProjectGet!]!
    projectAverageConversion(projectId: Int!): AverageConversionGet!
    projectGoals(projectId: Int!): [ProjectGoalGet!]!
    releaseCondition(releaseConditionId: Int!): ReleaseConditionGet!
    variant(featureFlagId: Int, variantId: Int): [VariantGet!]!
    variantAverageConversion(variantId: Int!): AverageConversionGet!
    variantStats(featureFlagId: Int!, fromTs: DateTime, toTs: DateTime, variantId: Int!): VariantStatsGet!
}

type RegionGet {
    cities: [String!]!
    region: String!
}

type ReleaseConditionGet {
    conditionSets: [ConditionSetGet!]!
    id: Int!
    name: String!
}

type UserGet {
    email: String!
    firstName: String!
    id: Int!
    lastName: String
    logo: MediaGet!
}

type UserRoleGet {
    email: String!
    firstName: String!
    id: Int!
    lastName: String
    logo: MediaGet!
    role: RoleGet!
}

type Value {
    achieved: Int!
    conversion: Float!
}

type VariantGet {
    fragment: FragmentVariantGet
    id: Int!
    name: String!
    rolloutPercentage: Float!
    status: VariantStatus!
}

type VariantStatsGet {
    lastViews: Int!
    percentage: Float!
    totalViews: Int!
}

enum CampaignStatus {
    ACTIVE
    ARCHIVED
    INACTIVE
}

enum ClientHistoryEventType {
    FEEDBACK
    GOAL_CONTRIBUTE
    GOAL_VIEW
    INIT
    RELEASE
    VIEW
}

enum ClientMetricType {
    INIT_SESSION
    REACH_PROJECT_GOAL
    RELEASE_SESSION
}

enum DeviceType {
    DESKTOP
    MOBILE
    TABLET
}

enum FeelLevelGet {
    FIVE
    FOUR
    ONE
    THREE
    TWO
}

enum MediaType {
    AREA_LOGO
    CAMPAIGN_LOGO
    FRAGMENT_ASSET
    PROJECT_LOGO
    USER_LOGO
}

enum OSType {
    ANDROID
    IOS
    LINUX
    MACOS
    WINDOWS
}

enum RoleGet {
    ADMIN
    DESIGNER
    MANAGER
    OWNER
}

enum RotationType {
    KEEP
    ROTATE
}

enum Trend {
    DOWN
    FLAT
    UP
}

enum VariantStatus {
    ACTIVE
    INACTIVE
}

"Date with time (isoformat)"
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf)."
scalar JSON

scalar Upload

"Represents NULL values"
scalar Void

input AreaPatch {
    areaCode: String
    description: String
    id: Int!
    properties: [JSON!]
}

input AreaPost {
    areaCode: String!
    defaultCampaignName: String!
    description: String
    projectId: Int!
    properties: [JSON!]
}

input CampaignPatch {
    description: String
    id: Int!
    name: String
    status: CampaignStatus
}

input CampaignPost {
    areaId: Int!
    description: String
    name: String!
    status: CampaignStatus!
}

input ClientMetricPost {
    metricType: ClientMetricType!
    metricValue: String
}

input ConditionPatch {
    filterData: FilterPost
    id: Int!
    name: String
}

input ConditionPost {
    filterData: FilterPost!
    name: String!
}

input ConditionSetPatch {
    conditions: [ConditionPost!]
    id: Int!
    name: String
}

input ConditionSetPost {
    conditions: [ConditionPost!]!
    name: String!
}

input FeatureFlagPatch {
    description: String
    id: Int!
    name: String
    releaseCondition: ReleaseConditionPatch
    rotationType: RotationType
    variants: [VariantPost!]
}

input FeatureFlagPost {
    description: String
    name: String!
    releaseCondition: ReleaseConditionPost!
    rotationType: RotationType!
    variants: [VariantPost!]!
}

input FeedbackPost {
    content: String
    feel: FeelLevelGet!
    page: String!
}

input FilterGeoLocationPost {
    city: String
    country: String!
    region: String
}

input FilterPost {
    deviceTypes: [DeviceType!]
    geoLocations: [FilterGeoLocationPost!]
    osTypes: [OSType!]
    pages: [String!]
    timeFrames: [FilterTimeFramePost!]
}

input FilterTimeFramePost {
    fromTime: DateTime!
    toTime: DateTime!
}

input FragmentPatch {
    directoryId: Int
    document: JSON
    id: Int!
    linkedFragments: [Int!]
    linkedGoals: [Int!]
    name: String
    props: JSON
}

input FragmentPost {
    directoryId: Int!
    document: JSON!
    linkedFragments: [Int!]
    linkedGoals: [Int!]
    name: String!
    projectId: Int!
    props: JSON
}

input FragmentVariantPatch {
    fragmentId: Int!
    props: JSON
}

input FragmentVariantPost {
    fragmentId: Int!
    props: JSON
}

input MediaDelete {
    mediaId: Int
    mediaType: MediaType!
    targetId: Int
}

input MediaPost {
    directoryId: Int
    mediaType: MediaType!
    targetId: Int
}

input ProjectDirectory {
    name: String!
    parentId: Int!
    projectId: Int!
}

input ProjectDirectoryPatch {
    id: Int!
    name: String
    parentId: Int
}

input ProjectGoalPatch {
    failureLevel: Float
    id: Int!
    name: String
    successLevel: Float
    targetAction: String
}

input ProjectGoalPost {
    failureLevel: Float
    name: String!
    projectId: Int!
    successLevel: Float
    targetAction: String!
}

input ProjectPatch {
    id: Int!
    name: String
}

input ProjectPost {
    logo: String
    name: String!
}

input ReleaseConditionPatch {
    conditionSets: [ConditionSetPost!]
    id: Int!
    name: String
}

input ReleaseConditionPost {
    conditionSets: [ConditionSetPost!]!
    name: String!
    projectId: Int!
}

input VariantPatch {
    fragment: FragmentVariantPatch
    id: Int!
    name: String
    rolloutPercentage: Float
    status: VariantStatus
}

input VariantPost {
    featureFlagId: Int!
    fragment: FragmentVariantPost!
    name: String!
    rolloutPercentage: Float!
    status: VariantStatus!
}
