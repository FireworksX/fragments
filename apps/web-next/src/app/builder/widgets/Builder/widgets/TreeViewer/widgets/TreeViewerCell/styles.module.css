/*import styled, { css } from 'styled-components'*/
/*import Touchable from '../../../../components/Touchable/Touchable'*/
/*import Icon from '../../../../components/Icon/Icon'*/
/*import TreeViewerCellAside from './components/TreeViewerCellAside/TreeViewerCellAside'*/
/*import { rgbToRgba } from '@adstore/utils'*/

/*interface Props {*/
/*  collapsed?: boolean*/
/*  partialSelection?: boolean*/
/*  prevSelected?: boolean*/
/*  nextSelected?: boolean*/
/*  selected?: boolean*/
/*  disabled?: boolean*/
/*  hasChildren?: boolean*/
/*  isOpen?: boolean*/
/*  isEdit?: boolean*/
/*  isPartialComponent?: boolean*/
/*  isPrimary?: boolean*/
/*}*/

.primaryIcon {
    color: var(--primary);
}

.textIcon {
    color: var(--secondary);
}

/*export const FrameIcon = styled(Icon).attrs({ name: 'frame', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.primary};*/
/*`*/

/*export const RowsIcon = styled(Icon).attrs({ name: 'rows-frame', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.primary};*/
/*`*/

/*export const ColumnsIcon = styled(Icon).attrs({ name: 'columns-frame', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.primary};*/
/*`*/

/*export const TextIcon = styled(Icon).attrs({ name: 'text-frame', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.secondary};*/
/*`*/

/*export const ComponentIcon = styled(Icon).attrs({ name: 'component-frame', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.component};*/
/*`*/

/*export const ComponentInstanceIcon = styled(Icon).attrs({ name: 'component-instance', width: 11, height: 11 })`*/
/*  color: ${({ theme }) => theme.colors.component};*/
/*`*/

/*export const Aside = styled(TreeViewerCellAside)`*/
/*  color: ${({ theme }) => theme.colors.secondary};*/
/*`*/

.root {
    height: 30px;
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 0 10px 0 0;
    color: var(--text-color-accent);
    transition: transform var(--animation-transition-default);

    &.selected {
        color: var(--text-color);
        .labelInput {
            color: var(--text-color);
        }
        .primaryIcon, .actions {
            color: var(--text-color);
        }
        &:after {
            background: var(--primary);
        }
    }

    &.selectedComponent {
        &, .titleCaret ,.labelInput, .primaryIcon, .actions {
            color: var(--text-color);
        }
        &:after {
            background: var(--component);
        }
    }

    &.partialSelected {
        &, .titleCaret {
            color: var(--text-color-accent);
        }

        &:after {
            background: rgba(var(--primary--rgb), .1);
        }
    }

    &.partialSelectedComponent {
        color: var(--text-color);
        &:after {
            background: var(--component);
        }
    }

    &.borderTop {
        &:after {
            border-top-left-radius: var(--radius-small);
            border-top-right-radius: var(--radius-small);
        }

    }

    &.borderBottom {
        &:after {
            border-bottom-left-radius: var(--radius-small);
            border-bottom-right-radius: var(--radius-small);
        }

    }

    &.empty {
        .primaryIcon, .textIcon, .titleCaret {
            color: var(--secondary);
        }
    }

    &.emptyPartial {
        .primaryIcon, .textIcon, .titleCaret {
            color: rgba(var(--secondary--rgb), .8);
        }
    }

    &:after {
        content: '';
        position: absolute;
        inset: 0;
        z-index: -1;
    }
}

.labelInput {
    width: 100%;
    font-size: 12px;
    text-transform: capitalize;
    border: none;
    outline: none;
    background: transparent;
    pointer-events: none;
    border-radius: 3px;
    color: var(--text-color-accent);

    &.editable {
        padding: 3px;
        pointer-events: auto;
        background: var(--background);
        color: var(--text-color-accent) !important;
    }

}

.headIcon {
    display: flex;
    align-items: center;
    justify-content: center;
}

.label {
    flex: 1;
    padding: 2px 2px 2px 0;
}

.collapse {
    width: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.actions {
    margin-left: auto;
    color: var(--secondary);
}

.body {
    position: relative;
}

.titleCaret {
    transition: transform var(--animation-transition-default);
}

.open {
    .titleCaret {
        transform: rotate(90deg);
    }
}


/*const IconComps = `${FrameIcon}, ${RowsIcon}, ${ColumnsIcon}, ${TextIcon}, ${ComponentIcon}, ${ComponentInstanceIcon}`*/
/*const IconCompsWithMonocolor = `${FrameIcon}, ${RowsIcon}, ${ColumnsIcon}, ${ComponentIcon}, ${ComponentInstanceIcon}`*/
/*const NestedComps = `${IconComps}, ${LabelInput}, ${TitleCaret}`*/

/*    let background = undefined*/
/*    let color = undefined*/
/*    let iconsColor = undefined*/
/*    let cssBackground = undefined*/

/*    if (selected) {*/
/*      color = theme.colors.textColorLight*/
/*    } else {*/
/*      if (!hasChildren) {*/
/*        iconsColor = partialSelection ? rgbToRgba(theme.colors.secondary, 0.8) : theme.colors.secondary*/
/*      }*/

/*      if (isPartialComponent) {*/
/*        iconsColor = theme.colors.component*/
/*      }*/
/*    }*/

/*    if (disabled) {*/
/*      color = selected ? rgbToRgba(theme.colors.textColorLight, 0.5) : rgbToRgba(theme.colors.textColorDark, 0.5)*/
/*      iconsColor = selected ? rgbToRgba(theme.colors.textColorLight, 0.5) : rgbToRgba(theme.colors.textColorDark, 0.5)*/
/*    }*/

/*    if (!prevSelected && nextSelected) {*/
/*      background = isPartialComponent && selected ? theme.colors.component : theme.colors.primary*/

/*      if (!cssBackground) {*/
/*        cssBackground =*/
/*          !collapsed &&*/
/*          css`*/
/*            border-bottom-left-radius: 0;*/
/*            border-bottom-right-radius: 0;*/
/*          `*/
/*      }*/
/*    }*/

/*    if (prevSelected && !nextSelected) {*/
/*      background = isPartialComponent && selected ? theme.colors.componentBg : theme.colors.primaryBg*/

/*      if (!cssBackground) {*/
/*        cssBackground = css`*/
/*          border-top-left-radius: 0;*/
/*          border-top-right-radius: 0;*/
/*        `*/
/*      }*/
/*    }*/

/*    if (prevSelected) {*/
/*      background = isPartialComponent && selected ? theme.colors.componentBg : theme.colors.primaryBg*/

/*      if (!cssBackground) {*/
/*        cssBackground = css`*/
/*          border-radius: 0;*/
/*        `*/
/*      }*/
/*    }*/

/*    if (!prevSelected && !nextSelected && partialSelection) {*/
/*      background = isPartialComponent && selected ? theme.colors.component : theme.colors.primary*/
/*    }*/

/*    return css`*/
/*      &:after {*/
/*        content: '';*/
/*        position: absolute;*/
/*        border-radius: ${({ theme }) => theme.baseStyles.radius.radiusSmall};*/
/*        inset: 0;*/
/*        z-index: -1;*/
/*        background: ${background};*/
/*        ${cssBackground}*/
/*      }*/

/*      ${NestedComps}, ${Aside} {*/
/*        color: ${color};*/
/*      }*/

/*      ${iconsColor &&*/
/*      css`*/
/*        ${IconCompsWithMonocolor} {*/
/*          color: ${iconsColor};*/
/*        }*/
/*      `}*/
/*    `*/
/*  }}*/
/*`*/

/*// const linkToHead = `> * > ${Head}`*/

/*// export const Root = styled.div<Props>`*/
/*//   position: relative;*/
/*//*/
/*//   ${({ theme, isPrimary }) =>*/
/*//     isPrimary &&*/
/*//     css`*/
/*//       ${Aside} {*/
/*//         color: ${theme.colors.primary};*/
/*//       }*/
/*//     `}*/
/*//*/
/*//   ${({ isActive, isComponent, theme }) =>*/
/*//     isActive &&*/
/*//     css`*/
/*//       background-color: ${isComponent ? theme.colors.componentBg : theme.colors.primaryBg};*/
/*//       border-radius: 5px;*/
/*//       overflow: hidden;*/
/*//*/
/*//       ${linkToHead} {*/
/*//         background-color: ${theme.colors.primary};*/
/*//*/
/*//         ${NestedComps} {*/
/*//           color: ${theme.colors.textColorLight};*/
/*//         }*/
/*//       }*/
/*//     `}*/
/*//*/
/*//   ${({ theme, isComponent, isActive }) =>*/
/*//     isComponent &&*/
/*//     css`*/
/*//       ${linkToHead} {*/
/*//         background-color: ${isActive && theme.colors.component};*/
/*//       }*/
/*//*/
/*//       ${IconCompsWithMonocolor} {*/
/*//         color: ${theme.colors.component};*/
/*//       }*/
/*//     `}*/
/*//*/
/*//   ${({ theme, isDisable, isActive }) =>*/
/*//     isDisable &&*/
/*//     css`*/
/*//       ${linkToHead} {*/
/*//         color: ${isActive*/
/*//           ? rgbToRgba(theme.colors.textColorLight, 0.5)*/
/*//           : rgbToRgba(theme.colors.textColorDark, 0.5)}!important;*/
/*//*/
/*//         ${NestedComps} {*/
/*//           color: ${isActive ? rgbToRgba(theme.colors.textColorLight, 0.5) : rgbToRgba(theme.colors.textColorDark, 0.5)};*/
/*//         }*/
/*//       }*/
/*//*/
/*//       ${NestedComps} {*/
/*//         color: ${rgbToRgba(theme.colors.textColorDark, 0.5)};*/
/*//       }*/
/*//     `}*/
/*// `*/

/*export const Label = styled.div`*/
/*  flex: 1;*/
/*  padding: 2px 2px 2px 0;*/
/*`*/

/*export const Collapse = styled(Touchable)`*/
/*  width: 12px;*/
/*  display: flex;*/
/*  align-items: center;*/
/*  justify-content: center;*/
/*`*/

/*export const Actions = styled.div`*/
/*  margin-left: auto;*/
/*`*/

/*export const Body = styled.div`*/
/*  position: relative;*/
/*`*/
