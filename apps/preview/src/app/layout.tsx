"use client";
import { createContext, ReactNode, useContext, useEffect, useRef } from "react";
import { renderToStaticMarkup } from "react-dom/server";
import type { Metadata } from "next";
import "./global.css";
import { createGlobalManager } from "@fragmentsx/render-core";
import { useSearchParams, useServerInsertedHTML } from "next/navigation";
import { collectStyles, GlobalManager } from "@fragmentsx/render-react";

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const WWW = ({ children }) => {
  const globalManager = createGlobalManager({
    apiToken:
      "2-534e0ddd2e09c836292ad94436463d45-2ba7423356013cae4bf0c06ab4e22f75ab743caa7367e1256f2ec599587f8c71",
    isSelfHosted: false,
  });

  const params = useSearchParams();
  const fragmentId = params.get("node");
  const isServerInserted = useRef(false);

  useEffect(() => {
    window.globalManager = globalManager;
    window.getDocumentManager = () =>
      globalManager.resolve(globalManager.key).fragmentsManagers[+fragmentId];
  }, []);

  useServerInsertedHTML(() => {
    if (!isServerInserted.current) {
      isServerInserted.current = true;

      // collectStyles(globalManager, renderToStaticMarkup);
      // const tags = await globalManager.extractStyleTags();

      // console.log(
      //   globalManager.resolve(globalManager.key).fragmentsManagers["16"]
      // );

      const styles = collectStyles(globalManager);

      return (
        <>
          {styles}
          {/*{styles.map((st) => (*/}
          {/*  <style dangerouslySetInnerHTML={{ __html: st }} />*/}
          {/*))}*/}
          {}
        </>
      );
    }
  });
  return <GlobalManager value={globalManager}>{children}</GlobalManager>;
};

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <html lang="en">
      <body>
        <WWW>{children}</WWW>
      </body>
    </html>
  );
}
