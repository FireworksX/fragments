{"version":3,"sources":["../src/isObject.ts","../src/isEmptyValue.ts","../src/isValue.ts","../src/isAbsoluteUrl.ts","../src/isHTMLNode.ts","../src/promiseWaiter.ts","../src/iterator.ts","../src/eventEmitter.ts","../src/replace.ts","../src/get.ts","../src/set.ts","../src/createConstants.ts","../src/isPrimitive.ts","../src/toKebabCase.ts","../src/toLongHex.ts","../src/rgbToHex.ts","../src/hexToRgb.ts","../src/rgbToRgba.ts","../src/mergeIterator.ts","../src/noop.ts","../src/filterDeep.ts","../src/findDeep.ts","../src/pick.ts","../src/omit.ts","../src/times.ts","../src/injectLink.ts","../src/debounce.ts","../src/generateId.ts","../src/colors/getRgbFromColor.ts","../src/colors/colorToObject.ts","../src/finiiteNumber.ts","../src/valueToDimensionType.ts"],"sourcesContent":["export const isObject = (input: unknown): input is Record<string, unknown> => {\n  return typeof input === 'object' && input !== null && !Array.isArray(input);\n};\n","export const isEmptyValue = (value: unknown): value is null | undefined =>\n  !value && (value === null || value === undefined)","import { isEmptyValue } from \"./isEmptyValue\";\n\nexport const isValue = <T>(value: T): value is Exclude<T, null | undefined> => !isEmptyValue(value)\n","export const isAbsoluteUrl = (input: any) => {\n  return typeof input === 'string' && !!input.includes && input.includes('://')\n}","export const isHTMLNode = (o: any) => {\n  return typeof Node === 'object'\n    ? o instanceof Node\n    : o && typeof o === 'object' && typeof o.nodeType === 'number' && typeof o.nodeName === 'string'\n}","export const promiseWaiter = <T = unknown>(duration = 300, payload?: T) =>\n  new Promise(resolve => setTimeout(() => resolve(payload), duration))","import { isValue } from \"./isValue\";\n\nexport type Visitor<TReturn = unknown, TValue = unknown> = (key: PropertyKey, value: TValue, path: string, options?: IteratorOptions) => TReturn\n\ntype FilterIteratorPredicate = (nextValue: unknown, key: string | number, input: unknown) => boolean\ntype SkipIteratorPredicate = (value: unknown) => boolean\n\ninterface IteratorOptions {\n  filterPredicate?: FilterIteratorPredicate\n  skipPredicate?: SkipIteratorPredicate\n  metaInfo?: Record<PropertyKey, any>\n}\n\nconst defaultFilterPredicate: FilterIteratorPredicate = () => true\nconst defaultSkipPredicate: SkipIteratorPredicate = () => false\n\nexport const iterator = <TVisitor extends Visitor>(input: unknown, visitor: TVisitor, basePath?: string, options?: IteratorOptions): any => {\n  const filterPredicate = options?.filterPredicate || defaultFilterPredicate\n  const skipPredicate = options?.skipPredicate || defaultSkipPredicate\n\n  if (skipPredicate(input)) return input\n\n  if (Array.isArray(input)) {\n    return input.map((el, index) => {\n      const newPath = [basePath, index].filter(isValue).join('.')\n      return iterator(visitor(index, el, newPath, options), visitor, newPath, options)\n    }).filter(filterPredicate)\n  }\n\n  if (typeof input === 'object' && input) {\n    return Object.entries(input).reduce((acc, [key, value]) => {\n      const newPath = [basePath, key].filter(isValue).join('.')\n      const nextValue = iterator(visitor(key, value, newPath, options), visitor, newPath, options)\n\n      if (filterPredicate(nextValue, key, input)) {\n        acc[key] = nextValue\n      }\n      return acc\n    }, {} as any)\n  }\n\n  return input\n}\n","\nexport interface EventEmitter<TEvents extends AnyEvents = AnyEvents> {\n  on<TKey extends keyof TEvents>(event: TKey, callback: TEvents[TKey]): ReturnType<TEvents[TKey]>\n\n  /**\n   * Метод emit() принимает event который нужно вызвать + параметры\n   * Возвращает массив того что вернули подписчики\n   */\n  emit<TKey extends keyof TEvents>(event: TKey, ...args: Parameters<TEvents[TKey]>): ReturnType<TEvents[TKey]>[]\n  has<TKey extends keyof TEvents>(event: TKey): boolean\n  get<TKey extends keyof TEvents>(event: TKey): unknown\n  reset(): void\n}\n\nexport type AnyEvents = Record<any, () => any>\n\nexport const eventEmitter = <TEvents extends AnyEvents = AnyEvents>(): EventEmitter<TEvents> => {\n  let listeners = {} as Record<keyof TEvents, TEvents[keyof TEvents][]>\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const on = <TKey extends keyof TEvents>(event: TKey, callback: TEvents[TKey]): ReturnType<TEvents[TKey]> => {\n    if (event in listeners) {\n      listeners[event].push(callback)\n    } else {\n      listeners[event] = [callback]\n    }\n  }\n\n  const emit = <TKey extends keyof TEvents>(\n    event: TKey,\n    ...args: Parameters<TEvents[TKey]>\n  ): ReturnType<TEvents[TKey]>[] => {\n    if (event in listeners) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      return listeners[event].map(cb => cb(...args)).filter(Boolean)\n    }\n\n    return []\n  }\n\n  const reset = () => (listeners = {} as typeof listeners)\n  const has = (event: keyof TEvents) => event in listeners\n  const get = (event: keyof TEvents) => listeners[event]\n\n  return {\n    on,\n    has,\n    get,\n    emit,\n    reset\n  }\n}\n","import { AnyObject } from \"../types\";\n\nexport const replace = (text: string, variables?: AnyObject): string => {\n  if (text && typeof text === 'string' && variables) {\n    const vars = Object.keys(variables)\n    return vars.reduce((resultText, variable) => {\n      const value = variables[variable]\n      const formatVar = typeof value === 'string' ? value.replace(/^\\s|\"/gi, '') : value\n      const regexp = new RegExp(`{${variable}}`, 'g')\n      return resultText.replace(regexp, formatVar ?? '')\n    }, text)\n  }\n  return text\n}\n","import { AnyObject } from \"../types\";\n\nexport const get = (obj: AnyObject, path: string, defValue?: unknown): any => {\n  if (!path) return undefined\n  const pathArray = (Array.isArray(path) ? path : path.match(/([^[.\\]])+/g)) as string[]\n  const result = pathArray.reduce((prevObj: AnyObject, key: string) => prevObj && prevObj[key], obj)\n  // If found value is undefined return default value; otherwise return the value\n  return result === undefined ? defValue : result\n}","import { AnyObject } from \"../types\";\n\nexport const set = (obj: AnyObject, path: string, value: unknown) => {\n  const pathArray = (Array.isArray(path) ? path : path.match(/([^[.\\]])+/g)) as string[]\n\n  return pathArray.reduce((acc, key, i) => {\n    if (acc[key] === undefined) acc[key] = {}\n    if (i === pathArray.length - 1) acc[key] = value\n    return acc[key]\n  }, obj)\n}","export const createConstants = <K extends string>(...constants: K[]) => {\n  return constants.reduce<{ [P in K]: P }>((acc, constant) => {\n    acc[constant] = constant\n    return acc\n  }, {} as { [P in K]: P })\n}","export const isPrimitive = (value: unknown): boolean =>\n  (typeof value !== 'object' && typeof value !== 'function') || value === null","export const toKebabCase = (value: string) => value.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? \"-\" : \"\") + $.toLowerCase())\n","/**\n * #f0f -> #ff00ff\n */\nexport const toLongHex = (hex: string) => {\n  const chars = hex.slice(1)\n\n  if (chars.length === 3) {\n    hex = '#' + chars\n      .split('')\n      .map(val => `${val}${val}`)\n      .join('')\n  }\n\n  return hex\n}","const componentToHex = (c: number) => {\n  const hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n};\n\nexport const rgbToHex = (r: number, g: number, b: number) => {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n};\n\nexport const rgbStringToHex = (rgb: string) => {\n  const match = rgb?.match?.(\n    /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/\n  );\n\n  const r = Number(match?.[1]);\n  const g = Number(match?.[2]);\n  const b = Number(match?.[3]);\n\n  return isNaN(r) ? rgb : rgbToHex(r, g, b);\n};\n","import { toLongHex } from \"./index\";\n\nexport const hexToRgb = (hex: string) => {\n  const longHex = toLongHex(hex)\n\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(longHex)\n\n  return result\n    ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    }\n    : undefined\n}","export const rgbToRgba = (rgb: string, alpha = 1): string => rgb.replace(')', `, ${alpha})`).replace('rgb', 'rgba')\n","import { iterator, Visitor } from \"./iterator\";\nimport { get, isPrimitive } from \"./index\";\nimport { AnyObject } from \"../types\";\n\n/**\n *\n * @param target - Объект, который будет заполняться\n * @param input - Данные, которыми будет заполняться target\n * @param customFilter - Кастомный Фильтр, если возвращает true - данные заменяются, иначе нет\n */\nexport const mergeIterator = (target: AnyObject, input: AnyObject, customFilter?: Visitor<boolean, [unknown, unknown]>) =>\n  iterator(target, (key, value, path) => {\n    if (isPrimitive(value) || (Array.isArray(value) && value.every(isPrimitive))) {\n      if (customFilter) {\n        if (customFilter(key, [value, get(input, path)], path)) {\n          return get(input, path, value)\n        } else {\n          return value\n        }\n      }\n      return get(input, path, value)\n    }\n\n    return value\n  })\n","export const noop = () => undefined\n","import { AnyObject } from \"../types\";\nimport { iterator } from \"./iterator\";\n\nexport const filterDeep = (\n  input: unknown[] | AnyObject,\n  predicate: (key: PropertyKey, value: unknown, path: string, resultArray: unknown[]) => boolean\n) => {\n  const result: unknown[] = []\n\n  iterator(input, (key, value, path) => {\n    if (predicate(key, value, path, result)) {\n      result.push({ key, value, path })\n    }\n\n    return value\n  })\n\n  return result\n}","import { AnyObject } from \"../types\";\nimport { iterator } from \"./iterator\";\n\nexport const findDeep = (\n  input: unknown[] | AnyObject,\n  predicate: (key: PropertyKey, value: unknown, path: string) => boolean\n): unknown | undefined => {\n  try {\n    iterator(input, (key, value, path) => {\n      if (predicate(key, value, path)) {\n        throw { key, value, path }\n      }\n\n      return value\n    })\n  } catch (findValue) {\n    return findValue as any\n  }\n}","import { AnyObject } from \"../types\";\n\nexport const pick = <TValue extends AnyObject>(obj: TValue, ...props: (keyof TValue)[]) => {\n  return props.reduce((result, prop) => {\n    result[prop] = obj[prop]\n    return result\n  }, {} as any)\n}","import { AnyObject } from \"../types\";\n\nexport function omit<T extends AnyObject, P extends string[]>(obj: T, ...props: P): Omit<T, P[number]> {\n  const result = { ...obj }\n  props.forEach(prop => {\n    delete result[prop]\n  })\n  return result\n}","export const times = (amount = 1): number[] => new Array(amount).fill(null).map((_, i) => i)\n","interface InjectLinkOptions {\n  rel: string\n  href: string\n}\n\nexport const injectLink = (options: InjectLinkOptions) => {\n  const head = document.getElementsByTagName('head')[0];\n  const link = document.createElement('link')\n\n  Object.entries(options).forEach(([key, value]) => link.setAttribute(key, value))\n\n  head.appendChild(link);\n}","export function debounce(\n  this: any,\n  func: (this: any, ...args: any) => any,\n  timeout = 300\n) {\n  let timer: any;\n  return (...args: any) => {\n    if (!timer) {\n      func.apply(this, args);\n    }\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      timer = undefined;\n    }, timeout);\n  };\n}\n","export const generateId = () => Math.random().toString(16).slice(2);\n","import { hexToRgb } from \"src\";\n\ninterface OutputColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\nexport const getRgbFromColor = (color: string): OutputColor | null => {\n  if (!color) return null;\n\n  if (typeof color === \"string\" && color.startsWith(\"#\")) {\n    return hexToRgb(color) || null;\n  }\n\n  if (typeof color === \"string\") {\n    const [r, g, b, a] = color.match(/\\d+/g) ?? [];\n\n    if (!r) {\n      return null;\n    }\n\n    return {\n      r: +r,\n      g: +g,\n      b: +b,\n      a: +a,\n    };\n  }\n\n  return color;\n};\n","import { hexToRgb } from \"src\";\nimport { getRgbFromColor } from \"./getRgbFromColor\";\n\ninterface OutputColor {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n}\n\nexport const colorToObject = (\n  color: string | OutputColor\n): OutputColor | null => {\n  if (!color) return null;\n  const isHex = typeof color === \"string\" && color.startsWith(\"#\");\n\n  if (isHex) {\n    const rgbColor = hexToRgb(color);\n    if (!rgbColor) return null;\n\n    return {\n      r: rgbColor.r,\n      g: rgbColor.g,\n      b: rgbColor.b,\n    };\n  }\n\n  if (typeof color === \"string\") {\n    return getRgbFromColor(color);\n  }\n\n  if ([\"r\", \"g\", \"b\"].every((v) => v in color)) {\n    return color;\n  }\n\n  return null;\n};\n","export function isFiniteNumber(value: unknown): value is number {\n  return typeof value === \"number\" && isFinite(value);\n}\nexport function finiteNumber(value: unknown) {\n  return isFiniteNumber(value) ? value : void 0;\n}\n","export function valueToDimensionType(value) {\n  if (typeof value === \"string\") {\n    const trimmedValue = value.trim();\n    if (trimmedValue === \"auto\") return 2; /* Auto */\n    if (trimmedValue.endsWith(\"fr\")) return 3; /* FractionOfFreeSpace */\n    if (trimmedValue.endsWith(\"%\")) return 1; /* Percentage */\n    if (trimmedValue.endsWith(\"vw\") || trimmedValue.endsWith(\"vh\"))\n      return 4; /* Viewport */\n  }\n  return 0; /* FixedNumber */\n}\n"],"mappings":"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","names":["get"]}